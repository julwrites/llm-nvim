# llms.txt for julwrites/llm-nvim
# A Neovim plugin for integrating with Simon Willison's llm CLI tool
# GitHub: https://github.com/julwrites/llm-nvim

## Overview
julwrites/llm-nvim is a Neovim plugin designed to seamlessly integrate with the llm CLI tool by Simon Willison. It enables users to interact with large language models (LLMs) directly from Neovim, offering features like prompting, code explanation, and management of models, API keys, fragments, templates, and schemas.

## Key Features
- Send prompts to LLMs directly from Neovim for quick responses.
- Process selected text or code with LLMs for refactoring or analysis.
- Explain code in the current buffer with detailed insights from LLMs.
- Manage API keys, custom models, and system prompts for various LLM providers.
- Use fragments (files, URLs, GitHub repos) to enrich prompts.
- Create and manage templates and schemas for structured interactions.
- Access a unified manager window for easy navigation of models, plugins, keys, and more.

## Installation
- Requires Neovim 0.7.0 or later and the llm CLI tool (install via `pip install llm` or `brew install llm`).
- Install using vim-plug: `Plug 'julwrites/llm-nvim'`.
- Install using packer.nvim: `use 'julwrites/llm-nvim'`.
- Install using lazy.nvim with optional configuration for default model and system prompt.

## Usage
- Basic prompting: Use `:LLM {prompt}` to send a query to an LLM.
- Code interaction: Select text and use `:LLMWithSelection {prompt}` for refactoring or analysis.
- Code explanation: Run `:LLMExplain` to get detailed explanations of the current buffer.
- Chat mode: Start a session with `:LLMChat {model}` for interactive conversations.
- Unified manager: Toggle with `:LLMToggle` or `<leader>ll` to manage models, keys, and more.

## Suggested Key Mappings
The plugin doesn't set default key mappings. Users can create their own, such as:
- `<leader>ll`: Toggle unified manager (`<Cmd>LLMToggle<CR>`)
- `<leader>lp`: Send prompt (`<Cmd>LLM<Space>`)
- `<leader>ls`: Send selection (visual mode, `<Cmd>LLM selection<CR>`)
- `<leader>le`: Explain buffer (`<Cmd>LLM explain<CR>`)

## Configuration
- Set a default model (e.g., 'gpt-4o') and system prompt via `require('llm').setup()`.
- Customize key mappings or disable defaults for personalized workflows.
- Enable debug mode for troubleshooting integration issues.

## Keywords
Neovim, LLM, AI plugin, code assistance, text generation, chat with AI, code explanation, Neovim AI integration, llm CLI, Simon Willison, GPT, Claude, Llama, API key management, fragments, templates, schemas.

## License
Apache 2.0

## Contact
For issues, contributions, or feature requests, visit the GitHub repository at https://github.com/julwrites/llm-nvim.
